library(rnoaa)
stations <- ghcnd_stations()
list_oz_stations <- grep('^ASN', stations$data$id)
oz_stations <- stations$data[list_oz_stations,]
show_stations <- function(location_name,
location_radius){
meteo_distance(data = oz_stations,
lat = ggmap::geocode(location_name)[[2]],
long = ggmap::geocode(location_name)[[1]],
radius = location_radius) %>%
leaflet() %>%
addCircles() %>%
addTiles()
}
show_stations("sydney", 10)
source('~/.active-rstudio-document')
show_stations("sydney", 10)
source('~/.active-rstudio-document')
source('~/show_stations.R')
list_oz_stations <- grep('^ASN', stations$data$id)
oz_stations <- stations$data[list_oz_stations,]
show_stations("sydney", 10)
install.packages('leaflet')
install.packages("leaflet")
library(leaflet)
stations <- ghcnd_stations()
list_oz_stations <- grep('^ASN', stations$data$id)
oz_stations <- stations$data[list_oz_stations,]
show_stations("sydney", 10)
list_oz_stations <- grep('^ASN', stations$data$id)
oz_stations <- stations$data[list_oz_stations,]
show_stations("sydney", 10)
library(dpylr)
library(dplyr)
show_stations("sydney", 10)
show_stations("sydney", 50)
show_stations("sydney", 50)
source('~/Documents/GitHub/rOpenSci/meteo_distance.R')
source('~/Documents/GitHub/rOpenSci/meteo_distance.R')
show_stations("sydney", 50)
show_stations("sydney", 500)
show_stations("sydney", 1000)
show_stations("Alice Springs", 1000)
show_stations("Alice Springs", 5000)
steve <- "cqJGoXwCVuxInBZTFCwOdudVNUASMvyj"
ghcnd_data <- ghcnd(stationid = meta_data$id[3])
library(rnoaa)
ghcnd_data <- ghcnd(stationid = meta_data$id[3])
oz_stations <- stations$data[list_oz_stations,]
ghcnd_data <- ghcnd(stationid = oz_stations$id[3])
cleaned_df <- clean_daily(ghcnd_data,
keep_flags = TRUE)
library(purrr)
cleaned_df %>% dmap(function(x) mean(is.na(x)))
mean(is.na(cleaned_df))
install.packages("purrr")
library(purrr)
cleaned_df %>% dmap(function(x) mean(is.na(x)))
cleaned_df
cleaned_df <- clean_daily(ghcnd_data,
keep_flags = TRUE)
update.packages()
cleaned_df <- clean_daily(ghcnd_data,
keep_flags = TRUE)
install.packages("dev_tools")
install.packages("devtools")
library(devtools)
instll_github(repo=rnoaa)
install_github(repo=rnoaa)
install_github(repo="rnoaa")
install_github(repo="A-Simmons/rnoaa")
library(rnoaa)
library(A-Simmons/rnoaa)
cleaned_df <- clean_daily(ghcnd_data,
keep_flags = TRUE)
install_github(repo="hrbrmstr/rnoaa")
cleaned_df <- clean_daily(ghcnd_data,
keep_flags = TRUE)
library(rnoaa)
cleaned_df <- clean_daily(ghcnd_data,
keep_flags = TRUE)
dev_package_deps("rnoaa")
dev_packages(rnoaa)
dev_package_deps(rnoaa)
library(maptools)
library(rnoaa)
library(ggmap)
# Change directory to match the location of your shape file
catchment.shp <- readShapePoly('~/Dropbox/R/catchment_region/shape/NGSA_Catchments.shp')
catchment_t.shp <- thinnedSpatialPoly(catchment.shp, tolerance=0.05, minarea=0.001)
stations <- ghcnd_stations()
list_oz_stations <- grep('^ASN', stations$data$id)
oz_stations <- stations$data[list_oz_stations,]
oz_stations <- meteo_unique_station_ID(oz_stations)
bris_meta_data <-
meteo_distance(station_data = oz_stations,
lat = ggmap::geocode("brisbane")[[2]],
long = ggmap::geocode("brisbane")[[1]],
limit = 17000)
View(meteo_distance)
View(meteo_distance)
bris_meta_data <-
meteo_distance(data = oz_stations,
lat = ggmap::geocode("brisbane")[[2]],
long = ggmap::geocode("brisbane")[[1]],
limit = 17000)
library(dplyr)
bris_meta_data <-
meteo_distance(data = oz_stations,
lat = ggmap::geocode("brisbane")[[2]],
long = ggmap::geocode("brisbane")[[1]],
limit = 17000)
point <- data.frame(lon=oz_stations$longitude, lat=oz_stations$latitude)
sp   <- SpatialPoints(point,proj4string=CRS(proj4string(catchment.shp)))
par(mai = rep(.1, 4))
xlim <- catchment_t.shp@bbox[1, ]
ylim <- catchment_t.shp@bbox[2, ]
plot(catchment_t.shp, col = "grey93", axes = F, xlim = xlim, ylim = ylim, bty = "n")
points(sp, pch = 16,col = 2, cex = .3)
colnames(bris_meta_data)
curr_index <- bris_meta_data$last_year %in% 2016
curr_index
point_curr <- data.frame(lon=oz_stations$longitude[curr_index], lat=oz_stations$latitude[curr_index])
point_old <- data.frame(lon=oz_stations$longitude[!curr_index], lat=oz_stations$latitude[!curr_index])
nrow(curr_index)
curr_index
nrow(oz_stations)
oz_stations <- meteo_unique_station_ID(oz_stations)
source('~/Dropbox/R/meteo_unique_station_ID.R')
oz_stations <- meteo_unique_station_ID(oz_stations)
point_curr <- data.frame(lon=oz_stations$longitude[curr_index], lat=oz_stations$latitude[curr_index])
point_old <- data.frame(lon=oz_stations$longitude[!curr_index], lat=oz_stations$latitude[!curr_index])
sp_curr   <- SpatialPoints(point_curr,proj4string=CRS(proj4string(catchment.shp)))
sp_old   <- SpatialPoints(point_old,proj4string=CRS(proj4string(catchment.shp)))
? points
points(sp_curr, pch = 16,col = 2, cex = .3, col='red')
points(sp_curr, pch = 16, cex = .3, col='red')
points(sp_old, pch = 16, cex = .3, col='blue')
points(sp_curr, pch = 16, cex = .3, col='red')
par(mai = rep(.1, 4))
xlim <- catchment_t.shp@bbox[1, ]
ylim <- catchment_t.shp@bbox[2, ]
plot(catchment_t.shp, col = "grey93", axes = F, xlim = xlim, ylim = ylim, bty = "n")
points(sp_curr, pch = 16, cex = .3, col='red')
points(sp_old, pch = 16, cex = .3, col='blue')
par(mai = rep(.1, 4))
xlim <- catchment_t.shp@bbox[1, ]
ylim <- catchment_t.shp@bbox[2, ]
plot(catchment_t.shp, col = "grey93", axes = F, xlim = xlim, ylim = ylim, bty = "n")
points(sp_old, pch = 16, cex = .15, col='blue')
points(sp_curr, pch = 16, cex = .3, col='red')
points(sp_old, pch = 16, cex = .2, col='blue')
points(sp_curr, pch = 16, cex = .3, col='red')
par(mai = rep(.1, 4))
xlim <- catchment_t.shp@bbox[1, ]
ylim <- catchment_t.shp@bbox[2, ]
plot(catchment_t.shp, col = "grey93", axes = F, xlim = xlim, ylim = ylim, bty = "n")
points(sp_old, pch = 16, cex = .25, col='blue')
points(sp_curr, pch = 16, cex = .3, col='red')
install.packages("rmarkdown")
library(rmarkdown)
? sort
c <- c(1,2,3,6,4,8,-1)
sort(c)
df <- data.frame(c,c('a','b','c','d','e','f','h'))
sort(df)
df
sort(c,'c')
sort(c,c$c)
c
sort(df,df$c)
? order
order(df)
order(df$c)
df$c
sort(df$c)
library(dplyr)
? arrange
arrange(df,df$c)
start.stack
start.stack = c();
start_stack = c(start_stack,2)
start.stack <- c(start.stack,1)
start.stack
start.stack = c();
escape.alphabet = c('(',')','{','}','[',']',' ',',')
escape.ignore = c('\n','\r')
index.start = gregexpr(pattern ='\\(',file.string)
file.string <- readChar('/Users/alexsimmons/Dropbox/R/HPC_Submission/test_script.R',file.info('/Users/alexsimmons/Dropbox/R/HPC_Submission/test_script.R')$size)
index.start = gregexpr(pattern ='\\(',file.string)
index.stop = gregexpr(pattern ='\\)',file.string)
stacked_starts = 1;
start.stack = c();
for (i in 1:nrows(index.stop)) {
for (j in stacked_starts:nrows(index.start)) {
if (index.start[j] < index.stop[i]) {
start.stack <- c(start.stack,index.start[j])
stacked_starts <- stacked_starts + 1
}
}
}
stacked_starts = 1;
start.stack = c();
for (i in 1:nrow(index.stop)) {
for (j in stacked_starts:nrow(index.start)) {
if (index.start[j] < index.stop[i]) {
start.stack <- c(start.stack,index.start[j])
stacked_starts <- stacked_starts + 1
}
}
}
index.stop
nrow(index.stop[[1]])
nrow(index.stop[1])
index.stop[[1]]
index.stop[[1]][1]
length(index.stop)
length(index.stop[[1]])
stacked_starts = 1;
start.stack = c();
for (i in 1:length(index.stop[[1]])) {
for (j in stacked_starts:length(index.start[[1]])) {
index.stop[1]
stacked_starts = 1;
start.stack = c();
for (i in 1:length(index.stop[[1]])) {
for (j in stacked_starts:length(index.start[[1]])) {
if (index.start[[1]][j] < index.stop[[1]][i]) {
start.stack <- c(start.stack,index.start[[1]][j])
stacked_starts <- stacked_starts + 1
}
}
}
i
j
start.stack
stacked_starts
stacked_starts:length(index.start[[1]]))
stacked_starts:length(index.start[[1]])
stacked_starts:1:length(index.start[[1]])
x <- stacked_starts:1:length(index.start[[1]])
x
stacked_starts = 1;
start.stack = c();
for (i in 1:length(index.stop[[1]])) {
if (stacked_starts < length(index.start[[1]])) {}
for (j in stacked_starts:length(index.start[[1]])) {
if (index.start[[1]][j] < index.stop[[1]][i]) {
start.stack <- c(start.stack,index.start[[1]][j])
stacked_starts <- stacked_starts + 1
}
}
}
}
stacked_starts = 1;
start.stack = c();
for (i in 1:length(index.stop[[1]])) {
if (stacked_starts < length(index.start[[1]])) {
for (j in stacked_starts:length(index.start[[1]])) {
if (index.start[[1]][j] < index.stop[[1]][i]) {
start.stack <- c(start.stack,index.start[[1]][j])
stacked_starts <- stacked_starts + 1
}
}
}
}
stacked_starts
start.stack
index.start
stacked_starts = 1;
start.stack = c();
for (i in 1:length(index.stop[[1]])) {
if (stacked_starts <= length(index.start[[1]])) {
for (j in stacked_starts:length(index.start[[1]])) {
if (index.start[[1]][j] < index.stop[[1]][i]) {
start.stack <- c(start.stack,index.start[[1]][j])
stacked_starts <- stacked_starts + 1
}
}
}
}
start.stack
? foreach
start.stack
start.stack(start.stack < 200)
start.stack[start.stack < 200]
start.stack < 200
x <- start.stack < 200
x
start.stack[x[2]]
stacked_starts = 1;
start.stack = c();
for (i in 1:length(index.stop[[1]])) {
if (stacked_starts <= length(index.start[[1]])) {
for (j in stacked_starts:length(index.start[[1]])) {
if (index.start[[1]][j] < index.stop[[1]][i]) {
start.stack <- c(start.stack,index.start[[1]][j])
print(c(j,stacked_starts))
stacked_starts <- stacked_starts + 1
}
}
}
}
for (i in 1:length(index.stop[[1]])) {
if (stacked_starts <= length(index.start[[1]])) {
for (j in stacked_starts:length(index.start[[1]])) {
if (index.start[[1]][j] < index.stop[[1]][i]) {
start.stack <- c(start.stack,index.start[[1]][j])
print(c(i,stacked_starts))
stacked_starts <- stacked_starts + 1
}
}
}
}
stacked_starts = 1;
start.stack = c();
for (i in 1:length(index.stop[[1]])) {
if (stacked_starts <= length(index.start[[1]])) {
for (j in stacked_starts:length(index.start[[1]])) {
if (index.start[[1]][j] < index.stop[[1]][i]) {
start.stack <- c(start.stack,index.start[[1]][j])
print(c(i,stacked_starts))
stacked_starts <- stacked_starts + 1
}
}
}
}
stacked_starts = 1;
start.stack = c();
for (i in 1:length(index.stop[[1]])) {
if (stacked_starts <= length(index.start[[1]])) {
for (j in stacked_starts:length(index.start[[1]])) {
if (index.start[[1]][j] < index.stop[[1]][i]) {
start.stack <- c(start.stack,index.start[[1]][j])
print(c(j,stacked_starts))
stacked_starts <- stacked_starts + 1
}
}
}
}
install.packages("ggplot2")
install.packages("dplyr")
install.packages("magrittr")
install.packages("magrittr")
setwd("~/PROBONO2")
a <- 1
a <- 1 + if (a==1) 1 else 2
a
a <- 1 + if (a==1) 1 else 2
a
a <- 1 + if (a==1) 1 else 2
a
log = FALSE
a
a <- a if (log) %>% log()
a <- a %>% if (log) log(.)
library(ggplot2)
library(dplyr)
library(magrittr)
a <- a %>% if (log) log(.)
a
a <- a if (log) %>% log()
a <- a {if (log) %>% log()}
a <- a %>% {if (log) log()}
a
log(1)
a <- a %>% {if (log) log() else}
a <- a %>% {if (log) log() else ()}
a <- a %>% {if (log) log() else transpose()}
a <- a %>% {if (log) log() else sqrt()}
a <- a %>% {if (log) log(.) else sqrt(.)}
a
a <- 1
a <- a %>% {if (log) log(.) else sqrt(.)}
a
a <- a %>% {if (log) log(.)}
a
a <- a %>% {if (log) log(.) else (.)}
a
a <- 1
a <- a %>% {if (log) log(.) else (.)}
a
a <- 25
a <- a %>% {if (log) log(.) else (.)}
a
log = TRUE
a <- a %>% {if (log) log(.) else (.)}
a
data <- read.csv('Greatest_Aussie_Groceries_sales_data.csv', header=TRUE, sep=",")
# Change column name of cx to match style of capital X and Y
colnames(data)[colnames(data)=="cx"] <- "cX"
retrieveData <- function(data, class, xy) {
names <- c("STORE", "oz", "p", "deal")
if (xy == "x")
temp <- data %>% filter(class==class) %>% select(STORE, oz_X, pX, deal_X)
else
temp <- data %>% filter(class==class) %>% select(STORE, oz_Y, pY, deal_Y)
colnames(temp) <- names
name <- if (xy == "x") "X" else "Y"
name <- if (class == "organic") paste(name,"O",sep="") else paste(name,"I",sep="")
name <- if (deal == 1) paste(name,"deal",sep="_") else paste(name,"no_deal",sep="_")
return(data.frame(type=rep(name,nrow(temp)),temp))
}
# Function that generates the inear model
lm_data <- retrieveData(data, deal=0, class="organic", xy="x")
lm_data <- retrieveData(data, class="organic", xy="x")
lm_data <- retrieveData(data, class="organic", xy="x")
retrieveData <- function(data, class, xy) {
names <- c("STORE", "oz", "p", "deal")
if (xy == "x")
temp <- data %>% filter(class==class) %>% select(STORE, oz_X, pX, deal_X)
else
temp <- data %>% filter(class==class) %>% select(STORE, oz_Y, pY, deal_Y)
colnames(temp) <- names
name <- if (xy == "x") "X" else "Y"
name <- if (class == "organic") paste(name,"O",sep="") else paste(name,"I",sep="")
return(data.frame(type=rep(name,nrow(temp)),temp))
}
# Function that generates the inear model
lm_data <- retrieveData(data, class="organic", xy="x")
lm_data <- rbind(lm_data,retrieveData(data, class="nonorganic", xy="x"))
lm_data <- rbind(lm_data,retrieveData(data, class="organic", xy="y"))
lm_data <- rbind(lm_data,retrieveData(data, class="nonorganic", xy="y"))
head(lm_data)
filteredLM <- function(data, type, log=FALSE, include_Deal=FALSE) {
response <- data %>% filter(type=type) %>% select(oz) %>% {if (log) log(.) else (.)}
ind <- data %>% filter(type=type) %>% select(p) %>% {if (log) log(.) else (.)}
deal <- data %>% filter(type=type) %>% select(deal) %>% {if (include_Deal) (.) else (.)*0}
return(lm(respose~ind + deal))
}
filteredLM(data, type="XO", log=TRUE, include_Deal=TRUE)
filteredLM <- function(data, type, log=FALSE, include_Deal=FALSE) {
response <- data %>% filter(type=type) %>% select(oz) %>% {if (log) log(.) else (.)}
ind <- data %>% filter(type==type) %>% select(p) %>% {if (log) log(.) else (.)}
deal <- data %>% filter(type==type) %>% select(deal) %>% {if (include_Deal) (.) else (.)*0}
return(lm(respose~ind + deal))
}
filteredLM <- function(data, type, log=FALSE, include_Deal=FALSE) {
filteredLM <- function(data, type, log=FALSE, include_Deal=FALSE) {
response <- data %>% filter(type=type) %>% select(oz) %>% {if (log) log(.) else (.)}
ind <- data %>% filter(type==type) %>% select(p) %>% {if (log) log(.) else (.)}
deal <- data %>% filter(type==type) %>% select(deal) %>% {if (include_Deal) (.) else (.)*0}
return(lm(respose~ind + deal))
}
filteredLM(data, type="XO", log=TRUE, include_Deal=TRUE)
filteredLM(data, type="XO", log=TRUE, include_Deal=TRUE)
filteredLM <- function(data, type, log=FALSE, include_Deal=FALSE) {
response <- data %>% filter(type==type) %>% select(oz) %>% {if (log) log(.) else (.)}
ind <- data %>% filter(type==type) %>% select(p) %>% {if (log) log(.) else (.)}
deal <- data %>% filter(type==type) %>% select(deal) %>% {if (include_Deal) (.) else (.)*0}
return(lm(respose~ind + deal))
}
filteredLM(data, type="XO", log=TRUE, include_Deal=TRUE)
head(data)
head(lm_data)
filteredLM(lm_data, type="XO", log=TRUE, include_Deal=TRUE)
filteredLM(lm_data, type="XO", log=TRUE, include_Deal=TRUE)
filteredLM <- function(data, type, log=FALSE, include_Deal=FALSE) {
response <- data %>% filter(type==type) %>% select(oz) %>% {if (log) log(.) else (.)}
ind <- data %>% filter(type==type) %>% select(p) %>% {if (log) log(.) else (.)}
deal <- data %>% filter(type==type) %>% select(deal) %>% {if (include_Deal) (.) else (.)*0}
return(lm(response~ind + deal))
}
filteredLM(lm_data, type="XO", log=TRUE, include_Deal=TRUE)
filteredLM <- function(data, type, log=FALSE, include_Deal=FALSE) {
response <- data %>% filter(type==type) %>% select(oz) %>% {if (log) log(.) else (.)}
ind <- data %>% filter(type==type) %>% select(p) %>% {if (log) log(.) else (.)}
deal <- data %>% filter(type==type) %>% select(deal) %>% {if (include_Deal) (.) else (.)*0}
return(lm(response~ind))
}
filteredLM(lm_data, type="XO", log=TRUE, include_Deal=TRUE)
filteredLM <- function(data, type, log=FALSE, include_Deal=FALSE) {
response <- data %>% filter(type==type) %>% select(oz) %>% {if (log) log(.) else (.)} %>% as.matrix()
ind <- data %>% filter(type==type) %>% select(p) %>% {if (log) log(.) else (.)} %>% as.matrix()
deal <- data %>% filter(type==type) %>% select(deal) %>% {if (include_Deal) (.) else (.)*0} %>% as.matrix()
return(lm(response~ind))
}
filteredLM <- function(data, type, log=FALSE, include_Deal=FALSE) {
response <- data %>% filter(type==type) %>% select(oz) %>% {if (log) log(.) else (.)} %>% as.matrix()
ind <- data %>% filter(type==type) %>% select(p) %>% {if (log) log(.) else (.)} %>% as.matrix()
deal <- data %>% filter(type==type) %>% select(deal) %>% {if (include_Deal) (.) else (.)*0} %>% as.matrix()
return(lm(response~ind))
}
filteredLM(lm_data, type="XO", log=TRUE, include_Deal=TRUE)
filteredLM <- function(data, type, log=FALSE, include_Deal=FALSE) {
response <- data %>% filter(type==type) %>% select(oz) %>% {if (log) log(.) else (.)} %>% as.matrix()
ind <- data %>% filter(type==type) %>% select(p) %>% {if (log) log(.) else (.)} %>% as.matrix()
deal <- data %>% filter(type==type) %>% select(deal) %>% {if (include_Deal) (.) else (.)*0} %>% as.matrix()
return(lm(response~ind+deal))
}
filteredLM(lm_data, type="XO", log=TRUE, include_Deal=TRUE)
filteredLM(lm_data, type="XO", log=TRUE, include_Deal=FALSE)
filteredLM <- function(data, type, log=FALSE, include_Deal=FALSE) {
response <- data %>% filter(type==type) %>% select(oz) %>% {if (log) log(.) else (.)} %>% as.matrix()
ind <- data %>% filter(type==type) %>% select(p) %>% {if (log) log(.) else (.)} %>% as.matrix()
deal <- data %>% filter(type==type) %>% select(deal) %>% {if (include_Deal) (.) else (.)*0} %>% as.matrix()
return(lm(response~ind))
}
filteredLM(lm_data, type="XO", log=TRUE, include_Deal=FALSE)
filteredLM <- function(data, type, log=FALSE, include_Deal=FALSE) {
response <- data %>% filter(type==type) %>% select(oz) %>% {if (log) log(.) else (.)} %>% as.matrix()
ind <- data %>% filter(type==type) %>% select(p) %>% {if (log) log(.) else (.)} %>% as.matrix()
deal <- data %>% filter(type==type) %>% select(deal) %>% {if (include_Deal) (.) else (.)*0} %>% as.matrix()
return(lm(response~ind+deal))
}
lmr <- filteredLM(lm_data, type="XO", log=TRUE, include_Deal=FALSE)
lmr
summary(lmr)
lmr <- filteredLM(lm_data, type="XO", log=TRUE, include_Deal=TRUE)
summary(lmr)
XO_lm_with_deal <- filteredLM(data, type="XO", include_Deal=TRUE)
XO_lm_without_deal <- filteredLM(data, type="XO", include_Deal=FALSE)
